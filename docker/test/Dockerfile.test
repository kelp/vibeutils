# Multi-stage optimized Dockerfile for vibeutils testing
# Implements security hardening, layer caching, and eliminates code duplication

ARG ZIG_VERSION=0.14.1

# =============================================================================
# BASE IMAGES
# =============================================================================

FROM ubuntu:24.04 AS base-ubuntu-24.04
FROM ubuntu:latest AS base-ubuntu-latest  
FROM debian:12 AS base-debian-12
FROM alpine:latest AS base-alpine

# =============================================================================
# COMMON SETUP STAGE - Shared across all distributions
# =============================================================================

FROM base-ubuntu-24.04 AS common-setup
ARG ZIG_VERSION

# Copy configuration and scripts
COPY docker/configs/ /docker/configs/
COPY docker/scripts/ /docker/scripts/

# Source environment configuration
RUN set -a && . /docker/configs/env.conf && set +a

# Make scripts executable
RUN chmod +x /docker/scripts/*.sh

# No user creation needed - running as root

# =============================================================================
# PACKAGE INSTALLATION STAGES - Distribution-specific
# =============================================================================

# Ubuntu/Debian package installer
FROM common-setup AS packages-apt
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
    # Essential tools
    curl \
    xz-utils \
    build-essential \
    git \
    bash \
    # Testing tools
    fakeroot \
    time \
    valgrind \
    # Build dependencies
    python3 \
    python3-pip \
    cmake \
    pkg-config \
    # Development libraries
    libcurl4-openssl-dev \
    libdw-dev \
    libiberty-dev \
    zlib1g-dev \
    libssl-dev \
    binutils-dev \
    libelf-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Alpine package installer  
FROM base-alpine AS packages-apk

# Copy scripts for Alpine
COPY docker/scripts/ /docker/scripts/
RUN chmod +x /docker/scripts/*.sh

# No user creation needed - running as root

# Install Alpine packages
RUN apk add --no-cache \
    # Essential tools
    curl \
    xz \
    build-base \
    git \
    bash \
    # Testing tools  
    valgrind \
    # Build dependencies
    python3 \
    py3-pip \
    cmake \
    pkgconf \
    # Development libraries
    curl-dev \
    elfutils-dev \
    zlib-dev \
    linux-headers

# =============================================================================
# ZIG INSTALLATION STAGE - Cached and reusable
# =============================================================================

FROM packages-apt AS zig-installer
ARG ZIG_VERSION

# Install Zig using shared script
RUN /docker/scripts/install-zig.sh "$ZIG_VERSION"

# Verify Zig installation
RUN zig version && \
    zig zen && \
    echo "Zig installation verified"

# =============================================================================  
# KCOV INSTALLATION STAGE - Build from source
# =============================================================================

FROM zig-installer AS kcov-installer
ARG KCOV_VERSION=v42

# Install kcov using shared script
RUN /docker/scripts/install-kcov.sh "$KCOV_VERSION"

# Verify kcov installation
RUN kcov --version || echo "kcov verification failed but continuing"

# =============================================================================
# FINAL TEST STAGES - Distribution-specific targets
# =============================================================================

# Ubuntu 24.04 LTS - Primary development environment
FROM kcov-installer AS test-ubuntu-24.04

# Set up environment
ENV FORCE_COLOR=1 \
    CI=true \
    GITHUB_ACTIONS=true \
    RUNNER_OS=Linux \
    DISTRO=ubuntu-24.04 \
    ZIG_GLOBAL_CACHE_DIR="/root/.cache/zig"

# Set working directory
WORKDIR /workspace

# Add health check
HEALTHCHECK --interval=5m --timeout=1m --retries=3 \
    CMD ["/docker/scripts/healthcheck.sh"]

# Run as root (default - no USER directive needed)

# Ubuntu Latest - Bleeding edge testing
FROM base-ubuntu-latest AS test-ubuntu-latest
ARG ZIG_VERSION

# Copy shared components
COPY docker/scripts/ /docker/scripts/
RUN chmod +x /docker/scripts/*.sh

# Install packages (reuse pattern from packages-apt)
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
    curl xz-utils build-essential git bash fakeroot time valgrind \
    python3 python3-pip cmake pkg-config \
    libcurl4-openssl-dev libdw-dev libiberty-dev zlib1g-dev \
    libssl-dev binutils-dev libelf-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Zig and kcov
RUN /docker/scripts/install-zig.sh "$ZIG_VERSION" && \
    /docker/scripts/install-kcov.sh "v42"

# Configure environment
ENV FORCE_COLOR=1 \
    CI=true \
    GITHUB_ACTIONS=true \
    RUNNER_OS=Linux \
    DISTRO=ubuntu-latest \
    ZIG_GLOBAL_CACHE_DIR="/root/.cache/zig"

WORKDIR /workspace

HEALTHCHECK --interval=5m --timeout=1m --retries=3 \
    CMD ["/docker/scripts/healthcheck.sh"]

# Run as root (default)

# Debian 12 - Stability testing
FROM base-debian-12 AS test-debian-12
ARG ZIG_VERSION

# Copy shared components
COPY docker/scripts/ /docker/scripts/
RUN chmod +x /docker/scripts/*.sh

# Install packages (Debian uses same packages as Ubuntu)
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
    curl xz-utils build-essential git bash fakeroot time valgrind \
    python3 python3-pip cmake pkg-config \
    libcurl4-openssl-dev libdw-dev libiberty-dev zlib1g-dev \
    libssl-dev binutils-dev libelf-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Zig and kcov
RUN /docker/scripts/install-zig.sh "$ZIG_VERSION" && \
    /docker/scripts/install-kcov.sh "v42"

# Configure environment
ENV FORCE_COLOR=1 \
    CI=true \
    GITHUB_ACTIONS=true \
    RUNNER_OS=Linux \
    DISTRO=debian-12 \
    ZIG_GLOBAL_CACHE_DIR="/home/testuser/.cache/zig"

WORKDIR /workspace
RUN chown testuser:testuser /workspace

HEALTHCHECK --interval=5m --timeout=1m --retries=3 \
    CMD ["/docker/scripts/healthcheck.sh"]

USER testuser

# Alpine Latest - musl libc testing
FROM packages-apk AS test-alpine
ARG ZIG_VERSION

# Install Zig (note: kcov may have issues on Alpine/musl)
RUN /docker/scripts/install-zig.sh "$ZIG_VERSION"

# Configure environment
ENV FORCE_COLOR=1 \
    CI=true \
    GITHUB_ACTIONS=true \
    RUNNER_OS=Linux \
    DISTRO=alpine-latest \
    ZIG_GLOBAL_CACHE_DIR="/home/testuser/.cache/zig"

WORKDIR /workspace
RUN chown testuser:testuser /workspace

# Alpine health check (skip kcov check)
HEALTHCHECK --interval=5m --timeout=1m --retries=3 \
    CMD ["/bin/sh", "-c", "/docker/scripts/healthcheck.sh || exit 0"]

USER testuser

# =============================================================================
# DEFAULT TARGET
# =============================================================================

# Default to Ubuntu 24.04 if no target specified
FROM test-ubuntu-24.04