name: Documentation

on:
  push:
    branches: [main]
    paths:
      - 'docs/**'
      - 'man/**'
      - 'README.md'
      - 'src/**/*.zig'  # Re-generate docs when code changes
  pull_request:
    branches: [main]
    paths:
      - 'docs/**'
      - 'man/**'
      - 'README.md'
  workflow_dispatch:

env:
  ZIG_VERSION: "0.14.1"
  FORCE_COLOR: 1

jobs:
  # Build and validate documentation
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Zig
      uses: mlugg/setup-zig@v2
      with:
        version: ${{ env.ZIG_VERSION }}
        
    - name: Cache Zig artifacts
      uses: actions/cache@v4
      with:
        path: |
          zig-cache
          zig-out
          ~/.cache/zig
        key: ${{ runner.os }}-zig-docs-${{ env.ZIG_VERSION }}-${{ hashFiles('build.zig', 'build.zig.zon', 'build/**/*.zig') }}
        restore-keys: |
          ${{ runner.os }}-zig-docs-${{ env.ZIG_VERSION }}-
          ${{ runner.os }}-zig-
        
    - name: Setup documentation tools
      uses: ./.github/actions/setup-doc-tools
      with:
        include-groff: true
        include-pandoc: true
        
    - name: Make scripts executable
      run: |
        chmod +x scripts/*.sh
        
    - name: Validate man pages
      run: |
        echo "Linting man pages with comprehensive checks..."
        ./scripts/lint-man-pages.sh --ci --verbose || {
          echo "::error::Man page linting failed"
          exit 1
        }
        
    - name: Generate documentation
      run: |
        echo "Generating documentation using shared script..."
        ./scripts/generate-docs.sh --ci
        
    - name: Generate README HTML (additional for CI)
      run: |
        echo "Generating README HTML for GitHub Pages..."
        # Convert README to HTML (pandoc only available in CI)
        if command -v pandoc > /dev/null; then
          pandoc README.md -o docs/html/README.html --standalone --css=style.css || {
            echo "::warning::Failed to convert README to HTML"
          }
        fi
        
    - name: Validate generated documentation
      run: |
        echo "Validating generated documentation..."
        
        # Check that key files were generated
        if [ ! -f "docs/html/index.html" ]; then
          echo "::error::index.html was not generated"
          exit 1
        fi
        
        # Check for broken links (basic check)
        if command -v grep > /dev/null; then
          grep -r "href=" docs/html/ | while read line; do
            echo "Found link: $line"
          done
        fi
        
        echo "Documentation validation complete"
        
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/html/
        retention-days: 30

  # Deploy documentation to GitHub Pages (only on main branch)
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [build-docs]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Download documentation artifacts
      uses: actions/download-artifact@v4
      with:
        name: documentation
        path: ./docs-site
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./docs-site
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Check documentation links
  link-check:
    name: Link Check
    runs-on: ubuntu-latest
    needs: [build-docs]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download documentation
      uses: actions/download-artifact@v4
      with:
        name: documentation
        path: ./docs-built
        
    - name: Install link checker
      run: |
        npm install -g markdown-link-check
        
    - name: Check README links
      run: |
        echo "Checking README links..."
        markdown-link-check README.md --config .github/link-check-config.json || {
          echo "::warning::Some links in README may be broken"
        }
        
    - name: Check documentation links
      run: |
        echo "Checking documentation links..."
        find docs/ -name "*.md" -exec markdown-link-check {} \; || {
          echo "::warning::Some documentation links may be broken"
        }

  # Documentation quality check
  docs-quality:
    name: Documentation Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check documentation completeness
      run: |
        echo "Checking documentation completeness..."
        
        # Check that all utilities have documentation
        missing_docs=0
        
        for utility in echo cat ls cp mv rm mkdir rmdir touch pwd chmod chown ln; do
          if [ -f "src/${utility}.zig" ] || [ -f "src/${utility}/main.zig" ]; then
            has_man=false
            has_readme_mention=false
            
            # Check for man page
            if [ -f "man/man1/${utility}.1" ]; then
              has_man=true
            fi
            
            # Check if mentioned in README
            if grep -q "${utility}" README.md; then
              has_readme_mention=true
            fi
            
            if [ "$has_man" = false ]; then
              echo "::warning::${utility} is missing man page"
              missing_docs=$((missing_docs + 1))
            fi
            
            if [ "$has_readme_mention" = false ]; then
              echo "::notice::${utility} is not mentioned in README"
            fi
          fi
        done
        
        echo "Documentation completeness check: $missing_docs missing items"
        
    - name: Check writing quality
      run: |
        echo "Checking writing quality..."
        
        # Basic checks for common issues
        if grep -r "TODO" docs/ README.md; then
          echo "::notice::Found TODO items in documentation"
        fi
        
        # Check for consistent style
        if grep -r "utilit[iy]" README.md | grep -v "utilities"; then
          echo "::notice::Check utility/utilities consistency"
        fi
        
        echo "Writing quality check complete"

  # Documentation summary
  docs-summary:
    name: Documentation Summary
    runs-on: ubuntu-latest
    needs: [build-docs, link-check, docs-quality]
    if: always()
    
    steps:
    - name: Generate documentation report
      run: |
        echo "## Documentation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Results" >> $GITHUB_STEP_SUMMARY
        echo "- ðŸ“š Documentation Build: ${{ needs.build-docs.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- ðŸ”— Link Check: ${{ needs.link-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Quality Check: ${{ needs.docs-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "### Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- ðŸš€ Documentation deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### Generated Documentation" >> $GITHUB_STEP_SUMMARY
        echo "- HTML documentation with navigation" >> $GITHUB_STEP_SUMMARY
        echo "- Man pages converted to HTML" >> $GITHUB_STEP_SUMMARY
        echo "- Cross-referenced utility guide" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "*Documentation generated on $(date)*" >> $GITHUB_STEP_SUMMARY