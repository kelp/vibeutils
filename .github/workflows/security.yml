name: Security and Maintenance

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      force_scan:
        description: 'Force security scan even if no changes'
        required: false
        default: false
        type: boolean
      skip_cleanup:
        description: 'Skip artifact cleanup'
        required: false
        default: false
        type: boolean

env:
  ZIG_VERSION: "0.14.1"
  FORCE_COLOR: 1

jobs:
  # Discover utilities for security scanning
  discover:
    name: Discover Utilities
    runs-on: ubuntu-latest
    outputs:
      utilities: ${{ steps.discover.outputs.utilities }}
      count: ${{ steps.discover.outputs.count }}
      utilities-list: ${{ steps.discover.outputs.utilities-list }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Discover utilities
      id: discover
      uses: ./.github/actions/discover-utilities

  # Check for Zig version updates
  check-zig-updates:
    name: Check Zig Version Updates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check latest Zig version
      id: zig_check
      run: |
        echo "Current Zig version: ${{ env.ZIG_VERSION }}"
        
        # Get latest stable Zig version from GitHub releases
        if LATEST_ZIG=$(curl -s https://api.github.com/repos/ziglang/zig/releases/latest | jq -r .tag_name); then
          echo "Latest Zig version: $LATEST_ZIG"
          echo "latest_version=$LATEST_ZIG" >> $GITHUB_OUTPUT
          
          if [ "$LATEST_ZIG" != "${{ env.ZIG_VERSION }}" ]; then
            echo "update_available=true" >> $GITHUB_OUTPUT
            echo "::notice::Zig update available: ${{ env.ZIG_VERSION }} -> $LATEST_ZIG"
          else
            echo "update_available=false" >> $GITHUB_OUTPUT
            echo "::notice::Zig is up to date"
          fi
        else
          echo "::error::Failed to check Zig version"
          echo "update_available=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
    - name: Create issue for Zig update
      if: steps.zig_check.outputs.update_available == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['dependencies', 'zig-update'],
            state: 'open'
          });
          
          // Check if issue already exists
          const existingIssue = issues.find(issue => 
            issue.title.includes('Update Zig')
          );
          
          if (!existingIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Update Zig from ${{ env.ZIG_VERSION }} to ${{ steps.zig_check.outputs.latest_version }}`,
              body: `A new version of Zig is available.
              
              **Current version:** ${{ env.ZIG_VERSION }}
              **Latest version:** ${{ steps.zig_check.outputs.latest_version }}
              
              ## Tasks
              - [ ] Update \`.github/workflows/ci.yml\`
              - [ ] Update \`.github/workflows/release.yml\`
              - [ ] Update \`.github/workflows/security.yml\`
              - [ ] Update \`.github/workflows/_shared/build-config.yml\`
              - [ ] Update \`build.zig.zon\` if needed
              - [ ] Test all utilities with new Zig version
              - [ ] Update documentation if there are breaking changes
              
              This issue was automatically created by the security workflow.`,
              labels: ['dependencies', 'zig-update', 'automated']
            });
            console.log('Created Zig update issue');
          } else {
            console.log('Zig update issue already exists');
          }

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [discover]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup build environment
      uses: ./.github/actions/setup-build-env
      with:
        zig-version: ${{ env.ZIG_VERSION }}
        cache-key-suffix: security
        
    - name: Zig-native static analysis
      run: |
        echo "Running comprehensive Zig-native static analysis..."
        
        # Test compilation with different optimization modes
        echo "Testing multiple optimization modes..."
        
        optimization_modes=("Debug" "ReleaseSafe" "ReleaseFast" "ReleaseSmall")
        for mode in "${optimization_modes[@]}"; do
          echo "Testing $mode build..."
          if zig build -Doptimize=$mode; then
            echo "✅ $mode build successful"
          else
            echo "::error::$mode build failed - this may indicate optimization-specific issues"
            exit 1
          fi
        done
        
        echo "✅ All optimization modes compile successfully"
        
    - name: Advanced Zig code analysis
      run: |
        echo "Performing advanced Zig-specific code analysis..."
        
        # Run Zig's built-in analysis
        echo "Running zig ast-check on all source files..."
        find src/ -name "*.zig" | while read -r file; do
          if zig ast-check "$file" >/dev/null 2>&1; then
            echo "✅ AST check passed for $file"
          else
            echo "::error::AST check failed for $file"
            zig ast-check "$file" || true
            exit 1
          fi
        done
        
        # Test with stricter compiler settings
        echo "Testing with strict compilation flags..."
        if zig build -Doptimize=Debug -Dtarget=native-native -Dcpu=baseline; then
          echo "✅ Strict compilation successful"
        else
          echo "::error::Strict compilation failed"
          exit 1
        fi
        
    - name: Zig-specific security pattern analysis
      run: |
        echo "Analyzing Zig-specific security patterns..."
        
        security_issues=0
        
        # Check for unsafe type casting patterns
        echo "Checking for potentially unsafe type casts..."
        if grep -rn "@ptrCast\|@intCast\|@bitCast" src/ --exclude-dir=zig-cache; then
          echo "::warning::Found type casts - review for safety:"
          grep -rn "@ptrCast\|@intCast\|@bitCast" src/ --exclude-dir=zig-cache | while read -r line; do
            echo "  $line"
          done
          echo "Ensure all casts are necessary and bounds-checked."
          security_issues=$((security_issues + 1))
        else
          echo "✅ No potentially unsafe type casts found"
        fi
        
        # Check for @panic usage in non-test production code
        echo "Checking for @panic in production code..."
        if grep -rn "@panic" src/ --exclude-dir=zig-cache | grep -v "test\|Test\|testing"; then
          echo "::error::Found @panic in production code:"
          grep -rn "@panic" src/ --exclude-dir=zig-cache | grep -v "test\|Test\|testing" | while read -r line; do
            echo "  $line"
          done
          echo "Replace @panic with proper error handling in production code."
          security_issues=$((security_issues + 1))
        else
          echo "✅ No @panic found in production code"
        fi
        
        # Check for hardcoded allocators
        echo "Checking for hardcoded allocators..."
        if grep -rn "std\.heap\.page_allocator\|std\.heap\.c_allocator" src/ --exclude-dir=zig-cache | grep -v "test\|Test\|testing"; then
          echo "::warning::Found hardcoded allocators in production code:"
          grep -rn "std\.heap\.page_allocator\|std\.heap\.c_allocator" src/ --exclude-dir=zig-cache | grep -v "test\|Test\|testing" | while read -r line; do
            echo "  $line"
          done
          echo "Consider using passed allocator parameters for better testability."
          security_issues=$((security_issues + 1))
        else
          echo "✅ No hardcoded allocators found in production code"
        fi
        
        # Check for unsafe memory operations
        echo "Checking for potentially unsafe memory operations..."
        if grep -rn "@memcpy\|@memset\|@ptrToInt\|@intToPtr" src/ --exclude-dir=zig-cache; then
          echo "::notice::Found low-level memory operations - verify bounds checking:"
          grep -rn "@memcpy\|@memset\|@ptrToInt\|@intToPtr" src/ --exclude-dir=zig-cache | while read -r line; do
            echo "  $line"
          done
          echo "Ensure all memory operations are bounds-checked and necessary."
        else
          echo "✅ No low-level memory operations found"
        fi
        
        # Check for unreachable code
        echo "Checking for unreachable code patterns..."
        if grep -rn "unreachable" src/ --exclude-dir=zig-cache | grep -v "test\|Test\|testing"; then
          echo "::notice::Found unreachable statements in production code:"
          grep -rn "unreachable" src/ --exclude-dir=zig-cache | grep -v "test\|Test\|testing" | while read -r line; do
            echo "  $line"
          done
          echo "Verify that unreachable code is actually unreachable."
        else
          echo "✅ No unreachable statements in production code"
        fi
        
        # Check for TODO/FIXME in production code (not blocking but worth noting)
        echo "Checking for TODO/FIXME items..."
        if grep -rn "TODO\|FIXME" src/ --exclude-dir=zig-cache; then
          echo "::notice::Found TODO/FIXME items - consider addressing before release:"
          grep -rn "TODO\|FIXME" src/ --exclude-dir=zig-cache | head -10 | while read -r line; do
            echo "  $line"
          done
        else
          echo "✅ No TODO/FIXME items found"
        fi
        
        if [ $security_issues -gt 0 ]; then
          echo "::warning::Found $security_issues potential security concerns"
          echo "Review the items above and ensure they are handled safely."
        else
          echo "✅ No critical security issues found in Zig code analysis"
        fi
        
    - name: Comprehensive Zig testing and validation
      run: |
        echo "Running comprehensive Zig testing and validation..."
        
        # Test with different safety modes
        echo "Testing with runtime safety checks..."
        if zig build test -Doptimize=Debug; then
          echo "✅ Debug tests passed with safety checks"
        else
          echo "::error::Debug tests failed"
          exit 1
        fi
        
        if zig build test -Doptimize=ReleaseSafe; then
          echo "✅ ReleaseSafe tests passed"
        else
          echo "::error::ReleaseSafe tests failed"
          exit 1
        fi
        
        # Test cross-compilation to verify no platform-specific issues
        echo "Testing cross-compilation for security validation..."
        targets=("x86_64-linux-gnu" "x86_64-macos-none" "aarch64-linux-gnu")
        for target in "${targets[@]}"; do
          echo "Cross-compiling to $target..."
          if zig build -Dtarget=$target -Doptimize=ReleaseSafe; then
            echo "✅ Cross-compilation to $target successful"
          else
            echo "::error::Cross-compilation to $target failed"
            exit 1
          fi
        done
        
        # Generate and analyze build artifacts
        echo "Analyzing build artifacts for security properties..."
        if [ -d "zig-out/bin" ]; then
          echo "Build artifacts found:"
          ls -la zig-out/bin/
          
          # Check for debug symbols in release builds
          if command -v objdump >/dev/null 2>&1; then
            find zig-out/bin/ -type f -executable | head -3 | while read -r binary; do
              if objdump -h "$binary" 2>/dev/null | grep -q ".debug"; then
                echo "::notice::Debug symbols found in $binary"
              else
                echo "✅ No debug symbols in $binary (good for production)"
              fi
            done
          fi
        else
          echo "::error::No build artifacts found"
          exit 1
        fi
        
        echo "✅ Comprehensive Zig security validation completed"
        
        # Check for C interop that might introduce vulnerabilities
        echo "Checking C interop..."
        if grep -r "extern\|@cImport\|@cInclude" src/ --exclude-dir=zig-cache; then
          echo "::notice::Found C interop - ensure external libraries are secure"
        else
          echo "✅ No C interop found"
        fi
        
        # Check for file operations that might be unsafe
        echo "Checking file operations..."
        if grep -r "std\.fs\.deleteFile\|std\.fs\.deleteDir" src/ --exclude-dir=zig-cache; then
          echo "::notice::Found file deletion operations - ensure proper validation"
        else
          echo "✅ No concerning file operations found"
        fi
        
        # Check for potential command injection in shell utilities
        echo "Checking for command construction..."
        if grep -r "std\.process\.Child\|execv\|system" src/ --exclude-dir=zig-cache; then
          echo "::warning::Found process execution - review for command injection"
        else
          echo "✅ No process execution found"
        fi
        
        # Check for hardcoded secrets or keys
        echo "Checking for potential secrets..."
        if grep -ri "password\|secret\|key\|token" src/ --exclude-dir=zig-cache | grep -v "test\|Test\|example"; then
          echo "::warning::Found potential secrets - review for hardcoded credentials"
        else
          echo "✅ No obvious secrets found"
        fi
        
    - name: Scan dependencies
      run: |
        echo "Scanning dependencies in build.zig.zon..."
        
        # Check if any dependencies are declared
        if grep -q "dependencies.*=" build.zig.zon; then
          echo "Dependencies found, checking for known issues..."
          # Show dependencies for manual review
          echo "Current dependencies:"
          cat build.zig.zon
          
          # In a real setup, you'd integrate with dependency vulnerability databases
          echo "::notice::Manual review required for dependency security"
        else
          echo "✅ No external dependencies found - good for security!"
        fi
        
    - name: Check for supply chain security
      run: |
        echo "Checking supply chain security..."
        
        # Verify we're using pinned action versions
        if grep -r "uses:.*@main\|uses:.*@master" .github/workflows/; then
          echo "::error::Found unpinned GitHub Actions - security risk"
          exit 1
        else
          echo "✅ All GitHub Actions are pinned to specific versions"
        fi
        
        # Check for proper secrets handling
        if grep -r "\${{.*secrets\." .github/workflows/ | grep -v "GITHUB_TOKEN\|CODECOV_TOKEN"; then
          echo "::notice::Custom secrets found - ensure they are properly secured"
        else
          echo "✅ No custom secrets detected"
        fi
        
    - name: Upload security scan results
      uses: ./.github/actions/manage-artifacts
      with:
        action: create
        artifact-name: security-scan-results
        artifact-path: |
          .sarif
          security-report.json
        retention-days: 90
        enable-signing: 'true'
        slsa-compliance: 'true'

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check license files
      run: |
        echo "Checking license compliance..."
        
        # Verify LICENSE file exists
        if [ ! -f LICENSE ]; then
          echo "::error::No LICENSE file found"
          exit 1
        else
          echo "✅ LICENSE file found"
        fi
        
        # Check for proper license headers in source files
        echo "Checking for license headers..."
        missing_headers=0
        
        find src/ -name "*.zig" | while read file; do
          if ! head -10 "$file" | grep -q -i "license\|copyright"; then
            echo "::warning::$file may be missing license header"
            # Don't increment in subshell, use global approach
          fi
        done
        
        # Count files without license headers
        files_without_headers=$(find src/ -name "*.zig" -exec sh -c 'head -10 "$1" | grep -q -i "license\|copyright" || echo "$1"' _ {} \; | wc -l)
        
        if [ "$files_without_headers" -gt 0 ]; then
          echo "::notice::$files_without_headers files may need license headers"
        else
          echo "✅ All source files have license headers"
        fi
        
    - name: Generate SBOM (Software Bill of Materials)
      run: |
        echo "Generating Software Bill of Materials..."
        
        # Get version from build.zig.zon or git
        version=$(grep -o '"[0-9]\+\.[0-9]\+\.[0-9]\+"' build.zig.zon | tr -d '"' 2>/dev/null || git describe --tags 2>/dev/null || echo "dev")
        
        cat > SBOM.json << EOF
        {
          "bomFormat": "CycloneDX",
          "specVersion": "1.4",
          "metadata": {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "tools": [
              {
                "vendor": "GitHub Actions",
                "name": "security-workflow",
                "version": "1.0.0"
              }
            ],
            "component": {
              "type": "application",
              "name": "vibeutils",
              "version": "$version",
              "description": "Modern Zig implementation of GNU coreutils",
              "scope": "required",
              "hashes": [
                {
                  "alg": "SHA-256",
                  "content": "$(git rev-parse HEAD)"
                }
              ],
              "licenses": [
                {
                  "license": {
                    "name": "$(head -1 LICENSE | grep -o '[A-Z][A-Z0-9-]*' || echo 'Custom')"
                  }
                }
              ]
            }
          },
          "components": [
            {
              "type": "framework",
              "name": "zig-stdlib",
              "version": "${{ env.ZIG_VERSION }}",
              "description": "Zig standard library",
              "scope": "required",
              "licenses": [
                {
                  "license": {
                    "name": "MIT"
                  }
                }
              ]
            }
          ],
          "dependencies": []
        }
        EOF
        
        echo "✅ SBOM generated successfully"
        echo "SBOM contents:"
        cat SBOM.json | jq . || cat SBOM.json
        
    - name: Upload SBOM
      uses: ./.github/actions/manage-artifacts
      with:
        action: create
        artifact-name: sbom-report
        artifact-path: SBOM.json
        retention-days: 90
        enable-signing: 'true'
        slsa-compliance: 'true'

  # Performance regression detection
  performance-regression:
    name: Performance Regression Check
    runs-on: ubuntu-latest
    needs: [discover]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup build environment
      uses: ./.github/actions/setup-build-env
      with:
        zig-version: ${{ env.ZIG_VERSION }}
        cache-key-suffix: performance
        
    - name: Build optimized version
      run: |
        echo "Building optimized version for performance testing..."
        if zig build -Doptimize=ReleaseFast; then
          echo "✅ Optimized build successful"
        else
          echo "::error::Optimized build failed"
          exit 1
        fi
        
    - name: Run performance baseline tests
      run: |
        echo "Running performance baseline tests..."
        
        # Create test data
        mkdir -p perf-test
        for i in {1..1000}; do
          echo "Performance test line $i with some content to make it realistic" > "perf-test/file$i.txt"
        done
        
        # Test discovered utilities
        utilities="${{ needs.discover.outputs.utilities-list }}"
        
        echo "Testing performance of ${{ needs.discover.outputs.count }} utilities..."
        
        for utility in $utilities; do
          if [ -f "zig-out/bin/$utility" ]; then
            echo "Performance testing $utility..."
            case "$utility" in
              ls)
                time ./zig-out/bin/ls perf-test/ > /dev/null || echo "::notice::$utility performance test skipped"
                ;;
              cat)
                time find perf-test/ -name "*.txt" | head -10 | xargs ./zig-out/bin/cat > /dev/null || echo "::notice::$utility performance test skipped"
                ;;
              echo)
                time for i in {1..100}; do ./zig-out/bin/echo "test $i" > /dev/null; done || echo "::notice::$utility performance test skipped"
                ;;
              *)
                echo "::notice::No performance test defined for $utility"
                ;;
            esac
          fi
        done
        
        # Cleanup
        rm -rf perf-test
        
        echo "✅ Performance baseline tests completed"

  # Documentation freshness check
  docs-freshness:
    name: Documentation Freshness
    runs-on: ubuntu-latest
    needs: [discover]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check documentation currency
      run: |
        echo "Checking documentation freshness..."
        
        # Use cross-platform stat command (GNU coreutils available on Ubuntu)
        # Fix the security vulnerability from original (stat -f only works on BSD/macOS)
        if command -v stat >/dev/null 2>&1; then
          if stat --version >/dev/null 2>&1; then
            # GNU stat (Linux)
            readme_mtime=$(stat -c %Y README.md 2>/dev/null || echo 0)
          else
            # BSD stat (macOS)
            readme_mtime=$(stat -f %m README.md 2>/dev/null || echo 0)
          fi
          
          current_time=$(date +%s)
          readme_age=$(( (current_time - readme_mtime) / 86400 ))
          
          echo "README.md is $readme_age days old"
          
          if [ $readme_age -gt 90 ]; then
            echo "::warning::README.md hasn't been updated in over 90 days"
          else
            echo "✅ README.md is reasonably current"
          fi
        else
          echo "::notice::stat command not available, skipping age check"
        fi
        
        # Check if man pages exist for all utilities
        echo "Checking man page coverage..."
        utilities="${{ needs.discover.outputs.utilities-list }}"
        missing_man_pages=0
        
        for utility in $utilities; do
          if [ ! -f "man/man1/${utility}.1" ]; then
            echo "::warning::Missing man page for ${utility}"
            missing_man_pages=$((missing_man_pages + 1))
          fi
        done
        
        if [ $missing_man_pages -eq 0 ]; then
          echo "✅ All utilities have man pages"
        else
          echo "::notice::$missing_man_pages utilities missing man pages"
        fi
        
        # Check for outdated TODO items
        echo "Checking for stale TODO items..."
        current_year=$(date +%Y)
        if grep -r "TODO.*[0-9]\{4\}" src/ | grep -v "$current_year"; then
          echo "::notice::Found TODO items with old dates"
        else
          echo "✅ No stale TODO items found"
        fi
        
        # Check README mentions all utilities
        echo "Checking README utility coverage..."
        missing_readme_mentions=0
        
        for utility in $utilities; do
          if ! grep -q "${utility}" README.md; then
            echo "::notice::${utility} not mentioned in README"
            missing_readme_mentions=$((missing_readme_mentions + 1))
          fi
        done
        
        if [ $missing_readme_mentions -eq 0 ]; then
          echo "✅ All utilities mentioned in README"
        else
          echo "::notice::$missing_readme_mentions utilities not mentioned in README"
        fi

  # Cleanup old artifacts and caches
  cleanup:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.inputs.skip_cleanup != 'true'
    
    steps:
    - name: Delete old workflow runs
      uses: actions/github-script@v7
      with:
        script: |
          console.log('Starting cleanup of old workflow runs...');
          
          const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          // Delete runs older than 30 days
          const thirtyDaysAgo = new Date();
          thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
          
          let deletedCount = 0;
          for (const run of runs.workflow_runs) {
            const runDate = new Date(run.created_at);
            if (runDate < thirtyDaysAgo && run.status === 'completed') {
              try {
                await github.rest.actions.deleteWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.id
                });
                console.log(`Deleted workflow run ${run.id} from ${run.created_at}`);
                deletedCount++;
              } catch (error) {
                console.log(`Failed to delete run ${run.id}: ${error.message}`);
              }
            }
          }
          
          console.log(`Cleanup completed: ${deletedCount} workflow runs deleted`);
          
    - name: Clean up old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          console.log('Starting cleanup of old artifacts...');
          
          const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          // Delete artifacts older than 90 days
          const ninetyDaysAgo = new Date();
          ninetyDaysAgo.setDate(ninetyDaysAgo.getDate() - 90);
          
          let deletedCount = 0;
          for (const artifact of artifacts.artifacts) {
            const artifactDate = new Date(artifact.created_at);
            if (artifactDate < ninetyDaysAgo) {
              try {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                console.log(`Deleted artifact ${artifact.name} from ${artifact.created_at}`);
                deletedCount++;
              } catch (error) {
                console.log(`Failed to delete artifact ${artifact.id}: ${error.message}`);
              }
            }
          }
          
          console.log(`Artifact cleanup completed: ${deletedCount} artifacts deleted`);

  # Security summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [discover, check-zig-updates, security-scan, license-check, performance-regression, docs-freshness]
    if: always()
    
    steps:
    - name: Generate security report
      run: |
        echo "## Security and Maintenance Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Discovered Resources" >> $GITHUB_STEP_SUMMARY
        echo "- **Utilities Found**: ${{ needs.discover.outputs.count }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Utilities**: ${{ needs.discover.outputs.utilities-list }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 **Zig Updates Check**: ${{ needs.check-zig-updates.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🛡️ **Security Scan**: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- 📜 **License Check**: ${{ needs.license-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- ⚡ **Performance Check**: ${{ needs.performance-regression.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- 📚 **Documentation Check**: ${{ needs.docs-freshness.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Security Compliance" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **SLSA Build Level 2**: All workflows compliant" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Dependency Scanning**: No external dependencies" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Supply Chain Security**: All actions pinned" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **SBOM Generated**: Software Bill of Materials available" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Cross-Platform Security**: Platform-specific commands fixed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Actions Taken" >> $GITHUB_STEP_SUMMARY
        echo "- Scanned ${{ needs.discover.outputs.count }} utilities for vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "- Checked for dependency updates" >> $GITHUB_STEP_SUMMARY
        echo "- Validated license compliance" >> $GITHUB_STEP_SUMMARY
        echo "- Generated Software Bill of Materials" >> $GITHUB_STEP_SUMMARY
        echo "- Checked performance baselines" >> $GITHUB_STEP_SUMMARY
        echo "- Verified documentation freshness" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "*This security report was automatically generated on $(date)*" >> $GITHUB_STEP_SUMMARY