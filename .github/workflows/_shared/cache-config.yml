# Centralized cache configuration for vibeutils workflows
# This eliminates duplication of cache settings across workflows

# Base cache configuration
cache-defaults: &cache-defaults
  version: v1
  ttl-days: 7

# Zig-specific cache configuration
zig-cache: &zig-cache
  <<: *cache-defaults
  paths:
    - zig-cache
    - zig-out
    - ${{ steps.cache-paths.outputs.system-cache }}
  key-prefix: zig
  
# Cache path detection for different operating systems
cache-paths:
  linux: &linux-cache-paths
    system: ~/.cache/zig
    node: ~/.npm
    cargo: ~/.cargo
  
  macos: &macos-cache-paths
    system: ~/Library/Caches/zig
    node: ~/.npm
    cargo: ~/.cargo
  
  windows: &windows-cache-paths
    system: "%LOCALAPPDATA%\\zig"
    node: "%APPDATA%\\npm-cache"
    cargo: "%USERPROFILE%\\.cargo"

# Cache key generators for different contexts
cache-keys:
  # Standard build cache
  build: &build-cache-key
    key: "${{ runner.os }}-zig-${{ env.ZIG_VERSION }}-build-${{ hashFiles('build.zig', 'build.zig.zon', 'build/**/*.zig') }}"
    restore-keys: |
      ${{ runner.os }}-zig-${{ env.ZIG_VERSION }}-build-
      ${{ runner.os }}-zig-${{ env.ZIG_VERSION }}-
      ${{ runner.os }}-zig-
  
  # Documentation build cache
  docs: &docs-cache-key
    key: "${{ runner.os }}-zig-docs-${{ env.ZIG_VERSION }}-${{ hashFiles('build.zig', 'build.zig.zon', 'build/**/*.zig', 'docs/**', 'man/**') }}"
    restore-keys: |
      ${{ runner.os }}-zig-docs-${{ env.ZIG_VERSION }}-
      ${{ runner.os }}-zig-${{ env.ZIG_VERSION }}-
      ${{ runner.os }}-zig-
  
  # Privileged testing cache
  privileged: &privileged-cache-key
    key: "${{ runner.os }}-zig-privileged-${{ env.ZIG_VERSION }}-${{ hashFiles('build.zig', 'build.zig.zon') }}"
    restore-keys: |
      ${{ runner.os }}-zig-privileged-${{ env.ZIG_VERSION }}-
      ${{ runner.os }}-zig-${{ env.ZIG_VERSION }}-
  
  # Cross-compilation cache
  cross-compile: &cross-compile-cache-key
    key: "${{ runner.os }}-zig-cross-${{ matrix.target }}-${{ env.ZIG_VERSION }}-${{ hashFiles('build.zig', 'build.zig.zon') }}"
    restore-keys: |
      ${{ runner.os }}-zig-cross-${{ matrix.target }}-${{ env.ZIG_VERSION }}-
      ${{ runner.os }}-zig-${{ env.ZIG_VERSION }}-
      ${{ runner.os }}-zig-
  
  # Security scanning cache
  security: &security-cache-key
    key: "${{ runner.os }}-security-${{ env.ZIG_VERSION }}-${{ hashFiles('src/**/*.zig', '.github/workflows/security.yml') }}"
    restore-keys: |
      ${{ runner.os }}-security-${{ env.ZIG_VERSION }}-
      ${{ runner.os }}-security-

# Cache management policies
policies:
  # When to skip cache
  skip-conditions:
    - "github.event_name == 'workflow_dispatch' && github.event.inputs.skip_cache == 'true'"
    - "contains(github.event.head_commit.message, '[skip cache]')"
  
  # When to force cache refresh
  refresh-conditions:
    - "contains(github.event.head_commit.message, '[refresh cache]')"
    - "github.event_name == 'schedule'"
  
  # Cache cleanup triggers
  cleanup-triggers:
    - "Weekly via schedule"
    - "Manual via workflow_dispatch"
    - "PR merge to main branch"

# Performance optimization settings
optimization:
  # Parallel cache operations
  parallel-cache: true
  
  # Cache compression
  compression: true
  
  # Cache size limits (MB)
  size-limits:
    build-cache: 500
    docs-cache: 100
    test-cache: 200
  
  # Automatic cleanup settings
  auto-cleanup:
    enabled: true
    keep-latest: 5
    max-age-days: 30

# Cache monitoring and metrics
monitoring:
  # Track cache hit rates
  hit-rate-tracking: true
  
  # Performance metrics
  metrics:
    - cache-hit-rate
    - cache-size
    - restore-time
    - save-time
  
  # Alerts
  alerts:
    low-hit-rate: 0.5  # Alert if hit rate below 50%
    large-cache-size: 1000  # Alert if cache size above 1GB

# Shared cache steps that can be imported
shared-steps:
  # Standard Zig build cache
  zig-build-cache: &zig-build-cache-step
    name: Cache Zig build artifacts
    uses: actions/cache@v4
    with:
      path: |
        zig-cache
        zig-out
        ${{ steps.cache-paths.outputs.system-cache }}
      key: ${{ runner.os }}-zig-${{ env.ZIG_VERSION }}-build-${{ hashFiles('build.zig', 'build.zig.zon', 'build/**/*.zig') }}
      restore-keys: |
        ${{ runner.os }}-zig-${{ env.ZIG_VERSION }}-build-
        ${{ runner.os }}-zig-${{ env.ZIG_VERSION }}-
        ${{ runner.os }}-zig-
  
  # Documentation cache
  docs-cache: &docs-cache-step
    name: Cache documentation artifacts
    uses: actions/cache@v4
    with:
      path: |
        zig-cache
        zig-out
        docs/html
        ${{ steps.cache-paths.outputs.system-cache }}
      key: ${{ runner.os }}-zig-docs-${{ env.ZIG_VERSION }}-${{ hashFiles('build.zig', 'build.zig.zon', 'docs/**', 'man/**') }}
      restore-keys: |
        ${{ runner.os }}-zig-docs-${{ env.ZIG_VERSION }}-
        ${{ runner.os }}-zig-${{ env.ZIG_VERSION }}-
        ${{ runner.os }}-zig-

# Cache validation and health checks
validation:
  # Pre-cache validation
  pre-cache-checks:
    - name: Validate cache paths
      run: |
        echo "Validating cache paths exist..."
        mkdir -p zig-cache zig-out
        echo "✅ Cache directories ready"
  
  # Post-cache validation
  post-cache-checks:
    - name: Validate cache contents
      if: steps.cache.outputs.cache-hit == 'true'
      run: |
        echo "Validating cached artifacts..."
        if [ -d "zig-cache" ]; then
          echo "✅ zig-cache found in cache"
        fi
        if [ -d "zig-out" ]; then
          echo "✅ zig-out found in cache"
        fi
        echo "Cache validation complete"

# Error handling for cache operations
error-handling:
  # Cache miss handling
  cache-miss: |
    echo "::notice::Cache miss - building from scratch"
    echo "This may increase build time but ensures fresh artifacts"
  
  # Cache save failure handling
  cache-save-failure: |
    echo "::warning::Failed to save cache - build will continue"
    echo "This may impact future build performance"
  
  # Cache restore failure handling
  cache-restore-failure: |
    echo "::warning::Failed to restore cache - falling back to clean build"
    echo "Build may take longer than usual"

# Best practices and guidelines
best-practices:
  guidelines:
    - "Always include restore-keys for graceful degradation"
    - "Use specific cache keys to avoid false cache hits"
    - "Include relevant file hashes in cache keys"
    - "Set appropriate cache retention periods"
    - "Monitor cache hit rates and sizes"
    - "Use different cache keys for different build types"
    - "Clean up old caches regularly"
  
  anti-patterns:
    - "Don't cache generated files that change every build"
    - "Don't use overly broad cache keys"
    - "Don't cache secrets or sensitive information"
    - "Don't rely solely on cache for critical functionality"