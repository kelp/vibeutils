# Shared build configuration for vibeutils workflows
# This file centralizes common build settings to eliminate duplication

# Environment variables used across all workflows
env:
  ZIG_VERSION: "0.14.1"
  FORCE_COLOR: 1
  CARGO_TERM_COLOR: always

# Common job defaults
defaults:
  run:
    shell: bash

# Standard timeout for most jobs
timeout-minutes: 15

# Common strategy matrix for multi-platform builds
strategy:
  build-matrix:
    fail-fast: false
    matrix:
      os: [ubuntu-latest, macos-latest]
      include:
        - os: ubuntu-latest
          cache_path: ~/.cache/zig
          os_name: linux
          platform: x86_64-linux-gnu
        - os: macos-latest  
          cache_path: ~/Library/Caches/zig
          os_name: macos
          platform: x86_64-macos-none

# Release matrix for cross-platform releases
release-matrix:
  strategy:
    fail-fast: false
    matrix:
      include:
        - target: x86_64-linux-gnu
          os: ubuntu-latest
          name: linux-x86_64
          archive: tar.gz
        - target: x86_64-macos-none
          os: macos-latest
          name: macos-x86_64
          archive: tar.gz
        - target: aarch64-macos-none
          os: macos-latest
          name: macos-aarch64
          archive: tar.gz
        - target: x86_64-windows-gnu
          os: ubuntu-latest
          name: windows-x86_64
          archive: zip
        - target: aarch64-linux-gnu
          os: ubuntu-latest
          name: linux-aarch64
          archive: tar.gz

# Common build steps that can be referenced
common-steps:
  validate-project: &validate-project
    name: Validate project structure
    run: |
      echo "Validating project structure..."
      if [ ! -f "build.zig" ]; then
        echo "::error::build.zig not found"
        exit 1
      fi
      
      if [ ! -f "build.zig.zon" ]; then
        echo "::error::build.zig.zon not found"
        exit 1
      fi
      
      if [ ! -d "src" ]; then
        echo "::error::src directory not found"
        exit 1
      fi
      
      echo "✅ Project structure validation passed"

  format-check: &format-check
    name: Check code formatting
    run: |
      echo "Checking code formatting..."
      if ! make fmt-check; then
        echo "::error::Code is not properly formatted. Run 'make fmt' to fix."
        echo "Files that need formatting:"
        if zig fmt --check src/ 2>&1; then
          echo "::notice::No formatting issues found in detailed check"
        else
          echo "::error::Code formatting check failed - run 'make fmt' to fix"
        fi
        exit 1
      fi
      echo "✅ Code formatting check passed"

  build-debug: &build-debug
    name: Build debug version
    run: |
      echo "Building debug version..."
      make debug

  build-release: &build-release
    name: Build release version
    run: |
      echo "Building release version..."
      make release

  run-tests: &run-tests
    name: Run unit tests
    run: |
      echo "Running unit tests..."
      make test

  test-basic-functionality: &test-basic-functionality
    name: Test basic functionality
    run: |
      echo "Testing basic utility functionality..."
      # Use discovered utilities or fallback to common ones
      if [ -f "zig-out/bin/echo" ]; then
        ./zig-out/bin/echo "Hello, World!"
      fi
      
      if [ -f "zig-out/bin/pwd" ]; then
        ./zig-out/bin/pwd
      fi
      
      if [ -f "zig-out/bin/cat" ]; then
        echo "test content" | ./zig-out/bin/cat
      fi
      
      echo "✅ Basic functionality tests passed"

# Security and compliance settings
security:
  # SLSA Build Level 2 requirements
  slsa-requirements:
    - "Build process is fully scripted/automated"
    - "Build service generates provenance"
    - "Provenance is authenticated and tamper-resistant"
    - "Build process is ephemeral and isolated"
  
  # Required security checks
  required-checks:
    - "Code formatting validation"
    - "Unit test execution"
    - "Artifact checksum generation"
    - "SLSA provenance generation"
    - "Dependency vulnerability scanning"

# Error handling standards
error-handling:
  # Replace all instances of '|| true' with proper error handling
  guidelines:
    - "Never use '|| true' to mask real failures"
    - "Use explicit error handling with proper exit codes"
    - "Log warnings using GitHub Actions annotations"
    - "Fail fast on critical errors, warn on non-critical issues"
  
  # Standard error patterns
  patterns:
    critical-error: |
      echo "::error::Critical error occurred"
      exit 1
    
    warning: |
      echo "::warning::Non-critical issue detected"
    
    notice: |
      echo "::notice::Information message"

# Cache configuration
cache-config:
  # Standard cache paths by OS
  paths:
    linux: ~/.cache/zig
    macos: ~/Library/Caches/zig
    windows: "%LOCALAPPDATA%\\zig"
  
  # Cache key patterns
  key-format: "${{ runner.os }}-zig-${{ env.ZIG_VERSION }}-{suffix}-${{ hashFiles('build.zig', 'build.zig.zon', 'build/**/*.zig') }}"
  
  # Restore key patterns
  restore-keys:
    - "${{ runner.os }}-zig-${{ env.ZIG_VERSION }}-{suffix}-"
    - "${{ runner.os }}-zig-${{ env.ZIG_VERSION }}-"
    - "${{ runner.os }}-zig-"

# Artifact management settings
artifacts:
  # Standard retention periods
  retention:
    build-artifacts: 7
    test-results: 7
    coverage-reports: 30
    release-artifacts: 90
    security-reports: 90
  
  # Naming conventions
  naming:
    build: "build-artifacts-{os}"
    test: "test-results-{os}"
    coverage: "coverage-report"
    release: "release-{platform}"
    security: "security-scan-{date}"

# Performance targets
performance:
  # Build time targets (minutes)
  build-timeout:
    debug: 5
    release: 10
    cross-compile: 15
  
  # Test execution targets (minutes)
  test-timeout:
    unit: 5
    integration: 10
    privileged: 5