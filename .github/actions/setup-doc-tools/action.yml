name: 'Setup Documentation Tools'
description: 'Install and configure documentation generation tools'
inputs:
  include-groff:
    description: 'Install groff/mandoc for man page processing'
    required: false
    default: 'true'
  include-pandoc:
    description: 'Install pandoc for document conversion'
    required: false
    default: 'false'
  include-link-checker:
    description: 'Install markdown link checker'
    required: false
    default: 'false'

outputs:
  mandoc-available:
    description: 'Whether mandoc is available'
    value: ${{ steps.check-tools.outputs.mandoc-available }}
  pandoc-available:
    description: 'Whether pandoc is available'
    value: ${{ steps.check-tools.outputs.pandoc-available }}
  link-checker-available:
    description: 'Whether link checker is available'
    value: ${{ steps.check-tools.outputs.link-checker-available }}

runs:
  using: 'composite'
  steps:
    - name: Install documentation tools (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        echo "Installing documentation tools on Linux..."
        sudo apt-get update
        
        # Install groff/mandoc for man page processing
        if [ "${{ inputs.include-groff }}" = "true" ]; then
          if sudo apt-get install -y mandoc groff-base; then
            echo "✅ Installed mandoc and groff"
          else
            echo "::warning::Failed to install mandoc/groff"
          fi
        fi
        
        # Install pandoc for document conversion
        if [ "${{ inputs.include-pandoc }}" = "true" ]; then
          if sudo apt-get install -y pandoc; then
            echo "✅ Installed pandoc"
          else
            echo "::warning::Failed to install pandoc from apt, trying snap..."
            if sudo snap install pandoc; then
              echo "✅ Installed pandoc via snap"
            else
              echo "::warning::Failed to install pandoc"
            fi
          fi
        fi
        
    - name: Install documentation tools (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        echo "Installing documentation tools on macOS..."
        
        # Install groff/mandoc
        if [ "${{ inputs.include-groff }}" = "true" ]; then
          if brew install mandoc; then
            echo "✅ Installed mandoc"
          else
            echo "::warning::Failed to install mandoc, using system groff"
          fi
        fi
        
        # Install pandoc
        if [ "${{ inputs.include-pandoc }}" = "true" ]; then
          if brew install pandoc; then
            echo "✅ Installed pandoc"
          else
            echo "::warning::Failed to install pandoc"
          fi
        fi
        
    - name: Install documentation tools (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        echo "Installing documentation tools on Windows..."
        
        # Install pandoc via chocolatey
        if [ "${{ inputs.include-pandoc }}" = "true" ]; then
          if choco install pandoc; then
            echo "✅ Installed pandoc"
          else
            echo "::warning::Failed to install pandoc"
          fi
        fi
        
        # Note: mandoc is not easily available on Windows
        if [ "${{ inputs.include-groff }}" = "true" ]; then
          echo "::notice::mandoc/groff not easily available on Windows, skipping"
        fi
        
    - name: Install Node.js tools
      if: inputs.include-link-checker == 'true'
      shell: bash
      run: |
        echo "Installing Node.js-based documentation tools..."
        
        # Also install mandoc for link checker job
        if [ "$RUNNER_OS" = "Linux" ]; then
          if ! command -v mandoc >/dev/null 2>&1; then
            if sudo apt-get install -y mandoc 2>/dev/null; then
              echo "✅ Installed mandoc for link checking"
            else
              echo "::notice::mandoc already installed or not available"
            fi
          fi
        fi
        
        # Install markdown link checker
        if command -v npm >/dev/null 2>&1; then
          if npm install -g markdown-link-check; then
            echo "✅ Installed markdown-link-check"
          else
            echo "::warning::Failed to install markdown-link-check"
          fi
        else
          echo "::warning::npm not available, cannot install link checker"
        fi
        
    - name: Check tool availability
      id: check-tools
      shell: bash
      run: |
        echo "Checking documentation tool availability..."
        
        # Check mandoc/groff
        if command -v mandoc >/dev/null 2>&1; then
          echo "mandoc-available=true" >> $GITHUB_OUTPUT
          echo "✅ mandoc available: $(mandoc -V)"
        elif command -v groff >/dev/null 2>&1; then
          echo "mandoc-available=true" >> $GITHUB_OUTPUT
          echo "✅ groff available: $(groff --version | head -1)"
        else
          echo "mandoc-available=false" >> $GITHUB_OUTPUT
          echo "::warning::Neither mandoc nor groff available"
        fi
        
        # Check pandoc
        if command -v pandoc >/dev/null 2>&1; then
          echo "pandoc-available=true" >> $GITHUB_OUTPUT
          echo "✅ pandoc available: $(pandoc --version | head -1)"
        else
          echo "pandoc-available=false" >> $GITHUB_OUTPUT
          echo "::notice::pandoc not available"
        fi
        
        # Check link checker
        if command -v markdown-link-check >/dev/null 2>&1; then
          echo "link-checker-available=true" >> $GITHUB_OUTPUT
          echo "✅ markdown-link-check available"
        else
          echo "link-checker-available=false" >> $GITHUB_OUTPUT
          echo "::notice::markdown-link-check not available"
        fi
        
    - name: Create link checker config
      if: steps.check-tools.outputs.link-checker-available == 'true'
      shell: bash
      run: |
        echo "Creating link checker configuration..."
        
        mkdir -p .github
        cat > .github/link-check-config.json << EOF
        {
          "ignorePatterns": [
            {
              "pattern": "^http://localhost"
            },
            {
              "pattern": "^https://localhost"
            },
            {
              "pattern": "^http://127.0.0.1"
            },
            {
              "pattern": "^https://127.0.0.1"
            }
          ],
          "httpHeaders": [
            {
              "urls": ["https://github.com"],
              "headers": {
                "User-Agent": "Mozilla/5.0 (compatible; Link Checker)"
              }
            }
          ],
          "timeout": "30s",
          "retryOn429": true,
          "retryCount": 3,
          "fallbackRetryDelay": "30s",
          "aliveStatusCodes": [200, 206]
        }
        EOF
        
        echo "✅ Link checker configuration created"
        
    - name: Test documentation tools
      shell: bash
      run: |
        echo "Testing documentation tools..."
        
        # Test mandoc if available
        if [ "${{ steps.check-tools.outputs.mandoc-available }}" = "true" ]; then
          echo "Testing mandoc/groff..."
          echo '.TH TEST 1' | mandoc >/dev/null 2>&1 && echo "✅ mandoc works" || echo "::warning::mandoc test failed"
        fi
        
        # Test pandoc if available
        if [ "${{ steps.check-tools.outputs.pandoc-available }}" = "true" ]; then
          echo "Testing pandoc..."
          echo "# Test" | pandoc -f markdown -t html >/dev/null 2>&1 && echo "✅ pandoc works" || echo "::warning::pandoc test failed"
        fi
        
        # Test link checker if available
        if [ "${{ steps.check-tools.outputs.link-checker-available }}" = "true" ]; then
          echo "Testing link checker..."
          echo "[test](https://github.com)" | markdown-link-check --config .github/link-check-config.json >/dev/null 2>&1 && echo "✅ link checker works" || echo "::warning::link checker test failed"
        fi
        
        
    - name: Summary
      shell: bash
      run: |
        echo "## Documentation Tools Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **mandoc/groff**: ${{ steps.check-tools.outputs.mandoc-available }}" >> $GITHUB_STEP_SUMMARY
        echo "- **pandoc**: ${{ steps.check-tools.outputs.pandoc-available }}" >> $GITHUB_STEP_SUMMARY
        echo "- **link-checker**: ${{ steps.check-tools.outputs.link-checker-available }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Available Tools" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.check-tools.outputs.mandoc-available }}" = "true" ]; then
          echo "- ✅ Man page processing available" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.check-tools.outputs.pandoc-available }}" = "true" ]; then
          echo "- ✅ Document conversion available" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.check-tools.outputs.link-checker-available }}" = "true" ]; then
          echo "- ✅ Link validation available" >> $GITHUB_STEP_SUMMARY
        fi