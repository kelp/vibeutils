name: 'Discover Utilities'
description: 'Dynamically discover available utilities from the codebase'
outputs:
  utilities:
    description: 'JSON array of utility names'
    value: ${{ steps.discover.outputs.utilities }}
  count:
    description: 'Number of utilities found'
    value: ${{ steps.discover.outputs.count }}
  utilities-list:
    description: 'Space-separated list of utilities'
    value: ${{ steps.discover.outputs.utilities-list }}

runs:
  using: 'composite'
  steps:
    - name: Discover utilities
      id: discover
      shell: bash
      run: |
        echo "Discovering utilities from build system..."
        
        # Use zig build --help to get the authoritative list of utilities
        # This is more reliable than parsing source files or build.zig
        utilities=()
        while IFS= read -r utility; do
          utilities+=("$utility")
        done < <(zig build --help 2>&1 | awk '/^  run-/ { 
          sub(/^  run-/, "")  # Remove the "  run-" prefix
          sub(/ .*/, "")      # Remove everything after the first space
          print 
        }')
        
        # Output results
        count=${#utilities[@]}
        
        # Create JSON array (compact single-line format for GitHub Actions)
        utilities_json=$(printf '%s\n' "${utilities[@]}" | jq -R . | jq -s -c .)
        
        # Create space-separated list
        utilities_list=$(printf '%s ' "${utilities[@]}")
        
        echo "Found $count utilities: ${utilities_list}"
        
        echo "utilities=$utilities_json" >> $GITHUB_OUTPUT
        echo "count=$count" >> $GITHUB_OUTPUT  
        echo "utilities-list=${utilities_list% }" >> $GITHUB_OUTPUT
        
    - name: Validate utilities
      shell: bash
      run: |
        echo "Validating discovered utilities..."
        
        # Check that each utility has corresponding source files
        utilities_list="${{ steps.discover.outputs.utilities-list }}"
        for utility in $utilities_list; do
          found=false
          
          if [ -f "src/${utility}.zig" ]; then
            found=true
          elif [ -f "src/${utility}/main.zig" ]; then
            found=true
          fi
          
          if [ "$found" = false ]; then
            echo "::warning::Utility '$utility' discovered but no source file found"
          else
            echo "âœ“ Validated: $utility"
          fi
        done
        
        echo "Utility discovery and validation complete"