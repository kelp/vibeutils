name: 'Cross-Platform Utilities'
description: 'Provides cross-platform file operations and command compatibility'
author: 'vibeutils'

inputs:
  operation:
    description: 'Operation to perform: stat, checksum, archive-list, or setup-env'
    required: true
  file-path:
    description: 'File path for operations'
    required: false
  hash-algorithm:
    description: 'Hash algorithm for checksum operations (sha256, md5)'
    required: false
    default: 'sha256'
  output-format:
    description: 'Output format: size-only, hash-only, full'
    required: false
    default: 'full'

outputs:
  result:
    description: 'Operation result'
    value: ${{ steps.execute.outputs.result }}
  size:
    description: 'File size (for stat operations)'
    value: ${{ steps.execute.outputs.size }}
  hash:
    description: 'File hash (for checksum operations)'
    value: ${{ steps.execute.outputs.hash }}
  platform-info:
    description: 'Platform information'
    value: ${{ steps.execute.outputs.platform-info }}

runs:
  using: 'composite'
  steps:
    - name: Execute cross-platform operation
      id: execute
      shell: bash
      run: |
        set -euo pipefail
        
        OPERATION="${{ inputs.operation }}"
        FILE_PATH="${{ inputs.file-path }}"
        HASH_ALGO="${{ inputs.hash-algorithm }}"
        OUTPUT_FORMAT="${{ inputs.output-format }}"
        
        # Detect platform and set up environment
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          PLATFORM="windows"
          STAT_CMD="powershell -Command \"(Get-Item '{}').Length\""
          SHA256_CMD="certutil -hashfile {} SHA256"
          MD5_CMD="certutil -hashfile {} MD5"
          LIST_CMD="powershell -Command \"Add-Type -AssemblyName System.IO.Compression.FileSystem; [System.IO.Compression.ZipFile]::OpenRead('{}').Entries | Select-Object Name\""
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          PLATFORM="macos"
          STAT_CMD="stat -f%z {}"
          SHA256_CMD="shasum -a 256 {}"
          MD5_CMD="md5 -r {}"
          LIST_CMD="tar -tzf {}"
        else
          PLATFORM="linux"
          STAT_CMD="stat -c%s {}"
          SHA256_CMD="sha256sum {}"
          MD5_CMD="md5sum {}"
          LIST_CMD="tar -tzf {}"
        fi
        
        echo "platform-info=$PLATFORM" >> $GITHUB_OUTPUT
        
        case "$OPERATION" in
          "stat")
            if [[ -z "$FILE_PATH" ]]; then
              echo "::error::file-path is required for stat operation"
              exit 1
            fi
            
            if [[ ! -f "$FILE_PATH" ]]; then
              echo "::error::File not found: $FILE_PATH"
              exit 1
            fi
            
            # Get file size using platform-appropriate command
            if [[ "$PLATFORM" == "windows" ]]; then
              SIZE=$(powershell -Command "(Get-Item '$FILE_PATH').Length")
            elif [[ "$PLATFORM" == "macos" ]]; then
              SIZE=$(stat -f%z "$FILE_PATH")
            else
              SIZE=$(stat -c%s "$FILE_PATH")
            fi
            
            echo "size=$SIZE" >> $GITHUB_OUTPUT
            
            if [[ "$OUTPUT_FORMAT" == "size-only" ]]; then
              echo "result=$SIZE" >> $GITHUB_OUTPUT
            else
              SIZE_KB=$((SIZE / 1024))
              SIZE_MB=$((SIZE / 1024 / 1024))
              if [[ $SIZE_MB -gt 0 ]]; then
                echo "result=${SIZE_MB}MB" >> $GITHUB_OUTPUT
              else
                echo "result=${SIZE_KB}KB" >> $GITHUB_OUTPUT
              fi
            fi
            ;;
            
          "checksum")
            if [[ -z "$FILE_PATH" ]]; then
              echo "::error::file-path is required for checksum operation"
              exit 1
            fi
            
            if [[ ! -f "$FILE_PATH" ]]; then
              echo "::error::File not found: $FILE_PATH"
              exit 1
            fi
            
            # Generate checksum using platform-appropriate command
            case "$HASH_ALGO" in
              "sha256")
                if [[ "$PLATFORM" == "windows" ]]; then
                  HASH_OUTPUT=$(certutil -hashfile "$FILE_PATH" SHA256)
                  HASH=$(echo "$HASH_OUTPUT" | grep -E '^[a-fA-F0-9]{64}$' | head -1)
                elif [[ "$PLATFORM" == "macos" ]]; then
                  HASH=$(shasum -a 256 "$FILE_PATH" | cut -d' ' -f1)
                else
                  HASH=$(sha256sum "$FILE_PATH" | cut -d' ' -f1)
                fi
                ;;
              "md5")
                if [[ "$PLATFORM" == "windows" ]]; then
                  HASH_OUTPUT=$(certutil -hashfile "$FILE_PATH" MD5)
                  HASH=$(echo "$HASH_OUTPUT" | grep -E '^[a-fA-F0-9]{32}$' | head -1)
                elif [[ "$PLATFORM" == "macos" ]]; then
                  HASH=$(md5 -r "$FILE_PATH" | cut -d' ' -f1)
                else
                  HASH=$(md5sum "$FILE_PATH" | cut -d' ' -f1)
                fi
                ;;
              *)
                echo "::error::Unsupported hash algorithm: $HASH_ALGO"
                exit 1
                ;;
            esac
            
            if [[ -z "$HASH" ]]; then
              echo "::error::Failed to generate $HASH_ALGO hash for $FILE_PATH"
              exit 1
            fi
            
            echo "hash=$HASH" >> $GITHUB_OUTPUT
            
            if [[ "$OUTPUT_FORMAT" == "hash-only" ]]; then
              echo "result=$HASH" >> $GITHUB_OUTPUT
            else
              echo "result=$HASH_ALGO: $HASH" >> $GITHUB_OUTPUT
            fi
            ;;
            
          "archive-list")
            if [[ -z "$FILE_PATH" ]]; then
              echo "::error::file-path is required for archive-list operation"
              exit 1
            fi
            
            if [[ ! -f "$FILE_PATH" ]]; then
              echo "::error::File not found: $FILE_PATH"
              exit 1
            fi
            
            # List archive contents using platform-appropriate command
            if [[ "$FILE_PATH" == *.zip ]]; then
              if [[ "$PLATFORM" == "windows" ]]; then
                # Use PowerShell to list zip contents on Windows
                CONTENTS=$(powershell -Command "Add-Type -AssemblyName System.IO.Compression.FileSystem; [System.IO.Compression.ZipFile]::OpenRead('$FILE_PATH').Entries | Select-Object -ExpandProperty Name" | head -20)
              else
                CONTENTS=$(unzip -l "$FILE_PATH" | tail -n +4 | head -n -2 | awk '{print $4}' | head -20)
              fi
            elif [[ "$FILE_PATH" == *.tar.gz ]] || [[ "$FILE_PATH" == *.tgz ]]; then
              CONTENTS=$(tar -tzf "$FILE_PATH" | head -20)
            else
              echo "::error::Unsupported archive format: $FILE_PATH"
              exit 1
            fi
            
            if [[ -n "$CONTENTS" ]]; then
              echo "result<<EOF" >> $GITHUB_OUTPUT
              echo "$CONTENTS" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "::error::Failed to list archive contents for $FILE_PATH"
              exit 1
            fi
            ;;
            
          "setup-env")
            # Set up cross-platform environment variables
            echo "CROSS_PLATFORM=$PLATFORM" >> $GITHUB_ENV
            
            if [[ "$PLATFORM" == "windows" ]]; then
              echo "STAT_FORMAT=powershell" >> $GITHUB_ENV
              echo "CHECKSUM_CMD=certutil" >> $GITHUB_ENV
              echo "ARCHIVE_CMD=powershell" >> $GITHUB_ENV
            elif [[ "$PLATFORM" == "macos" ]]; then
              echo "STAT_FORMAT=bsd" >> $GITHUB_ENV
              echo "CHECKSUM_CMD=shasum" >> $GITHUB_ENV  
              echo "ARCHIVE_CMD=tar" >> $GITHUB_ENV
            else
              echo "STAT_FORMAT=gnu" >> $GITHUB_ENV
              echo "CHECKSUM_CMD=coreutils" >> $GITHUB_ENV
              echo "ARCHIVE_CMD=tar" >> $GITHUB_ENV  
            fi
            
            echo "result=Environment configured for $PLATFORM" >> $GITHUB_OUTPUT
            ;;
            
          *)
            echo "::error::Unknown operation: $OPERATION"
            echo "Supported operations: stat, checksum, archive-list, setup-env"
            exit 1
            ;;
        esac
        
    - name: Validate operation result  
      shell: bash
      run: |
        RESULT="${{ steps.execute.outputs.result }}"
        if [[ -z "$RESULT" ]]; then
          echo "::error::Operation ${{ inputs.operation }} failed to produce a result"
          exit 1
        fi
        echo "âœ… Cross-platform operation '${{ inputs.operation }}' completed successfully"
        echo "Result: $RESULT"